package org.installer;
/**
 *
 * @author sajty
 */
import java.net.*;
import java.io.*;
import java.util.zip.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.lang.*;
public class Installation extends javax.swing.JPanel {

    /** Creates new form Installation */
    public Installation(AppMain app) {
        mApp = app;
        initComponents();
    }
    
    public void runInstall(int osType, String installPath){
        mOsType = osType;
        if(installPath.startsWith("~")){
            String home = System.getenv("HOME");
            installPath = home + installPath.substring(1);
        }
        File dir = new File(installPath);
        mInstallPath = dir.getAbsolutePath();
        mInstallThread = new InstallationProcess(this);
        mInstallThread.start();

    }
    
    public void progressIncrement() {
        int val = prgInstall.getValue();
        if(val<prgInstall.getMaximum()){
            prgInstall.setValue(val + 1);
        }
    }
    public void progressAddValue(int val) {
        int v = prgInstall.getValue();
        v += val;
        v = Math.min(v, prgInstall.getMaximum());
        prgInstall.setValue(v);
    }
    public int progressGetValue(int val) {
        return prgInstall.getMaximum();
    }
    public void progressSetValue(int val) {
        prgInstall.setValue(val);
    }
    public void progressSetMax(int max){
        prgInstall.setMaximum(max);
    }
    public int progressGetMax(){
        return prgInstall.getMaximum();
    }
    public synchronized void log(String s) {
        txtInstallLog.append(s + "\n");
        txtInstallLog.setCaretPosition(txtInstallLog.getText().length());
    }
    public void log(InputStream in) throws IOException
    {
        int available=in.available();
        if (available==0){
            return;
        }
        byte b[]=new byte[available];
        in.read(b);
        log(new String(b,0,b.length));
    }
    
    public int getOS() {
        return mOsType;
    }
    
    /** 
     * Returns the selected install path. 
     */
    public String getIntallPath() {
        return mInstallPath;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        prgInstall = new javax.swing.JProgressBar();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtInstallLog = new javax.swing.JTextArea();

        prgInstall.setMaximum(1000);

        jButton3.setText("abort");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        txtInstallLog.setColumns(20);
        txtInstallLog.setEditable(false);
        txtInstallLog.setLineWrap(true);
        txtInstallLog.setRows(5);
        txtInstallLog.setWrapStyleWord(true);
        jScrollPane1.setViewportView(txtInstallLog);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(167, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addGap(174, 174, 174))
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
                    .addComponent(prgInstall, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(prgInstall, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_jButton3ActionPerformed

    private boolean mQuit = false;
    private Thread mInstallThread;
    private Thread mIOWriterThread;
    
    
    private AppMain mApp;
    /**
     * Selected operating system type to install
     * It can be 0(Linux 32 bit),
     * 1(Linux 64bit), 2(Windows), 3(Mac OS X)
     */
    private int mOsType = 0;
    
    /**
     * Selected installation path.
     * On Mac OS X this can be ignored.
     */
    private String mInstallPath = "";
    
    private final PipedInputStream mStdOut = new PipedInputStream();
    private final PipedInputStream mStdErr = new PipedInputStream();
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JProgressBar prgInstall;
    private javax.swing.JTextArea txtInstallLog;
    // End of variables declaration//GEN-END:variables
}
